#!/bin/sh

################################################################################################
# file:        update
# description: script to update AUR packages.
#              In case no arguments are given we go through all directories in $XDG_CONFIG_HOME/aur
#              and check for updates. If argument is given it is a name of a package that we
#              want to install from AUR.
################################################################################################

DIR=$XDG_CONFIG_HOME/aur

function clean {
	git -C "$1" clean -xdf
}

function update {
	pkg=$1
	git -C "$pkg" pull
	if [[ $? == 0 ]]; then
		(cd "$pkg" && MAKEFLAGS="-j$(nproc)" makepkg -sric)
	fi
	clean $pkg
}

function check_updates {
	pkg=$1
	git -C "$pkg" checkout -- PKGBUILD
	git -C "$pkg" fetch 2> /dev/null
	LOCAL=$(git -C "$pkg" rev-parse @)
	BASE=$(git -C "$pkg" merge-base @ @{u})
	REMOTE=$(git -C "$pkg" rev-parse @{u})

	# do nada
	if [ $LOCAL = $REMOTE ]; then
		:
	elif [ $LOCAL = $BASE ]; then
		echo "UPDATING [ `basename $pkg` ]"
		update $pkg
	elif [ $REMOTE = $BASE ]; then
		echo "NEEDS PUSH ? [ `basename $pkg` ]"
	else
		echo "DIVERGED [ `basename $pkg` ]"
	fi
}

function install {
	pkg=$1
	giturl="https://aur.archlinux.org/$pkg.git"
	echo "installing $pkg from $giturl..."
	git clone $giturl
	update $pkg
}

if [ $# == 0 ];
then # loop through all the packages and check for updates
	for pkg in $DIR/*
	do
		if [ -d "$pkg" ]; then
			check_updates $pkg
		fi
	done
else # update specific package
	pkg=$1
	if [ ! -d $pkg ]; then
		echo "INSTALL [ $pkg ]"
		install $pkg
	#elif [ $2 = "--force" ]; then
		#update $pkg
	else
		check_updates $pkg
	fi
fi
